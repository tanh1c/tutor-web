import React, { useState, useEffect, useContext } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Paper,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Switch,
  FormControlLabel,
  TextField,
  Divider,
  Alert,
  Chip,
  LinearProgress,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Snackbar,
} from '@mui/material';
import {
  Settings as SettingsIcon,
  Storage as DatabaseIcon,
  Security as SecurityIcon,
  CloudSync as BackupIcon,
  Analytics as AnalyticsIcon,
  Email as EmailIcon,
  Notifications as NotificationsIcon,
  Update as UpdateIcon,
  AdminPanelSettings as AdminIcon,
  Assessment as ReportIcon,
  Schedule as ScheduleIcon,
  Group as UsersIcon,
  School as SchoolIcon,
  Refresh as RefreshIcon,
  Save as SaveIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Visibility as ViewIcon,
  Warning as WarningIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
} from '@mui/icons-material';
import { UserContext } from '../context/UserContext';
import Header from '../components/layout/Header';

const SystemManagementPage = () => {
  const { user } = useContext(UserContext);
  const [loading, setLoading] = useState(false);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'info' });
  const [openDialog, setOpenDialog] = useState(false);
  const [selectedFeature, setSelectedFeature] = useState(null);
  
  // System settings state
  const [systemSettings, setSystemSettings] = useState({
    maintenance: false,
    allowRegistration: true,
    emailNotifications: true,
    smsNotifications: false,
    autoBackup: true,
    debugMode: false,
    maxUsersPerSession: 50,
    sessionTimeout: 30,
    maxFileSize: 10,
  });

  const theme = {
    primary: '#1e40af',
    secondary: '#1e3a8a', 
    success: '#059669',
    warning: '#d97706',
    error: '#dc2626',
    info: '#0284c7'
  };

  const systemStats = [
    { label: 'T·ªïng ng∆∞·ªùi d√πng', value: '1,234', change: '+12%', color: theme.primary, icon: <UsersIcon /> },
    { label: 'Sessions ho·∫°t ƒë·ªông', value: '56', change: '+3%', color: theme.success, icon: <ScheduleIcon /> },
    { label: 'Dung l∆∞·ª£ng ƒë√£ d√πng', value: '78%', change: '+5%', color: theme.warning, icon: <DatabaseIcon /> },
    { label: 'Uptime h·ªá th·ªëng', value: '99.9%', change: '0%', color: theme.success, icon: <CheckCircleIcon /> },
  ];

  const systemModules = [
    {
      title: 'Qu·∫£n l√Ω Ng∆∞·ªùi d√πng',
      description: 'C·∫•u h√¨nh v√† qu·∫£n l√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng',
      icon: <UsersIcon sx={{ fontSize: 32, color: theme.primary }} />,
      status: 'active',
      actions: ['Xem chi ti·∫øt', 'C·∫•u h√¨nh', 'B√°o c√°o']
    },
    {
      title: 'H·ªá th·ªëng Email',
      description: 'C·∫•u h√¨nh g·ª≠i email v√† th√¥ng b√°o',
      icon: <EmailIcon sx={{ fontSize: 32, color: theme.info }} />,
      status: 'active',
      actions: ['Ki·ªÉm tra', 'C·∫•u h√¨nh', 'L·ªãch s·ª≠']
    },
    {
      title: 'B·∫£o m·∫≠t',
      description: 'C√†i ƒë·∫∑t b·∫£o m·∫≠t v√† x√°c th·ª±c',
      icon: <SecurityIcon sx={{ fontSize: 32, color: theme.error }} />,
      status: 'warning',
      actions: ['Ki·ªÉm tra', 'C·∫•u h√¨nh', 'Logs']
    },
    {
      title: 'C∆° s·ªü d·ªØ li·ªáu',
      description: 'Qu·∫£n l√Ω v√† sao l∆∞u d·ªØ li·ªáu',
      icon: <DatabaseIcon sx={{ fontSize: 32, color: theme.success }} />,
      status: 'active',
      actions: ['Sao l∆∞u', 'Kh√¥i ph·ª•c', 'T·ªëi ∆∞u']
    },
    {
      title: 'Analytics',
      description: 'Th·ªëng k√™ v√† b√°o c√°o h·ªá th·ªëng',
      icon: <AnalyticsIcon sx={{ fontSize: 32, color: theme.warning }} />,
      status: 'active',
      actions: ['Xem b√°o c√°o', 'Xu·∫•t d·ªØ li·ªáu', 'C·∫•u h√¨nh']
    },
    {
      title: 'C·∫≠p nh·∫≠t h·ªá th·ªëng',
      description: 'Qu·∫£n l√Ω phi√™n b·∫£n v√† c·∫≠p nh·∫≠t',
      icon: <UpdateIcon sx={{ fontSize: 32, color: theme.info }} />,
      status: 'update-available',
      actions: ['Ki·ªÉm tra', 'C·∫≠p nh·∫≠t', 'L·ªãch s·ª≠']
    }
  ];

  const recentActivities = [
    { time: '10:30', action: 'Ng∆∞·ªùi d√πng m·ªõi ƒëƒÉng k√Ω', user: 'Nguy·ªÖn VƒÉn A', type: 'info' },
    { time: '09:15', action: 'Sao l∆∞u d·ªØ li·ªáu th√†nh c√¥ng', user: 'System', type: 'success' },
    { time: '08:45', action: 'C·∫£nh b√°o dung l∆∞·ª£ng cao', user: 'System', type: 'warning' },
    { time: '08:30', action: 'ƒêƒÉng nh·∫≠p admin', user: 'Admin User', type: 'info' },
    { time: '07:20', action: 'G·ª≠i email th√¥ng b√°o', user: 'System', type: 'success' },
  ];

  const showSnackbar = (message, severity = 'info') => {
    setSnackbar({ open: true, message, severity });
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  const handleSettingChange = (setting, value) => {
    setSystemSettings(prev => ({
      ...prev,
      [setting]: value
    }));
    showSnackbar(`ƒê√£ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t ${setting}`, 'success');
  };

  const handleModuleAction = (module, action) => {
    setSelectedFeature({ module, action });
    setOpenDialog(true);
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'active': return theme.success;
      case 'warning': return theme.warning;
      case 'error': return theme.error;
      case 'update-available': return theme.info;
      default: return theme.primary;
    }
  };

  const getStatusLabel = (status) => {
    switch (status) {
      case 'active': return 'Ho·∫°t ƒë·ªông';
      case 'warning': return 'C·∫£nh b√°o';
      case 'error': return 'L·ªói';
      case 'update-available': return 'C√≥ c·∫≠p nh·∫≠t';
      default: return 'Kh√¥ng r√µ';
    }
  };

  return (
    <>
      <Header />
      <Box sx={{ minHeight: '100vh', backgroundColor: '#f8fafc', pt: 3 }}>
        <Box sx={{ maxWidth: 1400, mx: 'auto', p: 3 }}>
          {/* Header */}
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={4}>
            <Box>
              <Typography variant="h4" fontWeight="bold" gutterBottom>
                üîß Qu·∫£n l√Ω H·ªá th·ªëng
              </Typography>
              <Typography variant="body1" color="text.secondary">
                Qu·∫£n l√Ω v√† c·∫•u h√¨nh to√†n b·ªô h·ªá th·ªëng tutor support
              </Typography>
            </Box>
            <Box display="flex" gap={2}>
              <Button
                variant="contained"
                startIcon={<RefreshIcon />}
                onClick={() => showSnackbar('ƒê√£ l√†m m·ªõi d·ªØ li·ªáu', 'success')}
                sx={{ backgroundColor: theme.primary }}
              >
                L√†m m·ªõi
              </Button>
              <Button
                variant="outlined"
                startIcon={<SaveIcon />}
                onClick={() => showSnackbar('ƒê√£ l∆∞u c·∫•u h√¨nh', 'success')}
              >
                L∆∞u c·∫•u h√¨nh
              </Button>
            </Box>
          </Box>

          {/* System Stats */}
          <Grid container spacing={3} mb={4}>
            {systemStats.map((stat, index) => (
              <Grid item xs={12} sm={6} md={3} key={index}>
                <Card sx={{ 
                  height: '100%',
                  background: `linear-gradient(135deg, ${stat.color}15 0%, ${stat.color}08 100%)`,
                  border: `1px solid ${stat.color}20`,
                  borderRadius: 3
                }}>
                  <CardContent>
                    <Box display="flex" alignItems="center" gap={2}>
                      <Box sx={{ 
                        p: 1.5, 
                        borderRadius: 2, 
                        backgroundColor: `${stat.color}15`,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}>
                        {React.cloneElement(stat.icon, { sx: { fontSize: 24, color: stat.color } })}
                      </Box>
                      <Box>
                        <Typography variant="h4" fontWeight="bold" color={stat.color}>
                          {stat.value}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          {stat.label}
                        </Typography>
                        <Typography variant="caption" color={stat.change.includes('+') ? theme.success : theme.error}>
                          {stat.change}
                        </Typography>
                      </Box>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>

          <Grid container spacing={3}>
            {/* System Settings */}
            <Grid item xs={12} md={4}>
              <Paper sx={{ p: 3, borderRadius: 3, height: 'fit-content' }}>
                <Typography variant="h6" fontWeight="600" gutterBottom>
                  ‚öôÔ∏è C√†i ƒë·∫∑t H·ªá th·ªëng
                </Typography>
                <List>
                  <ListItem>
                    <ListItemText primary="Ch·∫ø ƒë·ªô b·∫£o tr√¨" secondary="T·∫°m kh√≥a h·ªá th·ªëng" />
                    <Switch
                      checked={systemSettings.maintenance}
                      onChange={(e) => handleSettingChange('maintenance', e.target.checked)}
                    />
                  </ListItem>
                  <ListItem>
                    <ListItemText primary="Cho ph√©p ƒëƒÉng k√Ω" secondary="Ng∆∞·ªùi d√πng m·ªõi c√≥ th·ªÉ ƒëƒÉng k√Ω" />
                    <Switch
                      checked={systemSettings.allowRegistration}
                      onChange={(e) => handleSettingChange('allowRegistration', e.target.checked)}
                    />
                  </ListItem>
                  <ListItem>
                    <ListItemText primary="Th√¥ng b√°o Email" secondary="G·ª≠i email t·ª± ƒë·ªông" />
                    <Switch
                      checked={systemSettings.emailNotifications}
                      onChange={(e) => handleSettingChange('emailNotifications', e.target.checked)}
                    />
                  </ListItem>
                  <ListItem>
                    <ListItemText primary="Sao l∆∞u t·ª± ƒë·ªông" secondary="Sao l∆∞u d·ªØ li·ªáu h√†ng ng√†y" />
                    <Switch
                      checked={systemSettings.autoBackup}
                      onChange={(e) => handleSettingChange('autoBackup', e.target.checked)}
                    />
                  </ListItem>
                  <ListItem>
                    <ListItemText primary="Debug Mode" secondary="Hi·ªÉn th·ªã th√¥ng tin debug" />
                    <Switch
                      checked={systemSettings.debugMode}
                      onChange={(e) => handleSettingChange('debugMode', e.target.checked)}
                    />
                  </ListItem>
                </List>

                <Divider sx={{ my: 2 }} />
                
                <Typography variant="subtitle2" fontWeight="600" gutterBottom>
                  C·∫•u h√¨nh hi·ªáu su·∫•t
                </Typography>
                <Box mb={2}>
                  <TextField
                    fullWidth
                    label="S·ªë ng∆∞·ªùi d√πng t·ªëi ƒëa/session"
                    type="number"
                    size="small"
                    value={systemSettings.maxUsersPerSession}
                    onChange={(e) => handleSettingChange('maxUsersPerSession', parseInt(e.target.value))}
                  />
                </Box>
                <Box mb={2}>
                  <TextField
                    fullWidth
                    label="Timeout session (ph√∫t)"
                    type="number"
                    size="small"
                    value={systemSettings.sessionTimeout}
                    onChange={(e) => handleSettingChange('sessionTimeout', parseInt(e.target.value))}
                  />
                </Box>
                <TextField
                  fullWidth
                  label="K√≠ch th∆∞·ªõc file t·ªëi ƒëa (MB)"
                  type="number"
                  size="small"
                  value={systemSettings.maxFileSize}
                  onChange={(e) => handleSettingChange('maxFileSize', parseInt(e.target.value))}
                />
              </Paper>
            </Grid>

            {/* System Modules */}
            <Grid item xs={12} md={8}>
              <Paper sx={{ p: 3, borderRadius: 3 }}>
                <Typography variant="h6" fontWeight="600" gutterBottom>
                  üîß Modules H·ªá th·ªëng
                </Typography>
                <Grid container spacing={2}>
                  {systemModules.map((module, index) => (
                    <Grid item xs={12} sm={6} key={index}>
                      <Card sx={{ 
                        height: '100%',
                        border: `1px solid ${getStatusColor(module.status)}20`,
                        borderRadius: 2,
                        transition: 'transform 0.2s, box-shadow 0.2s',
                        '&:hover': {
                          transform: 'translateY(-2px)',
                          boxShadow: 3
                        }
                      }}>
                        <CardContent>
                          <Box display="flex" alignItems="center" gap={2} mb={2}>
                            {module.icon}
                            <Box>
                              <Typography variant="h6" fontWeight="600">
                                {module.title}
                              </Typography>
                              <Chip
                                label={getStatusLabel(module.status)}
                                size="small"
                                sx={{
                                  backgroundColor: `${getStatusColor(module.status)}15`,
                                  color: getStatusColor(module.status),
                                  fontWeight: 600
                                }}
                              />
                            </Box>
                          </Box>
                          <Typography variant="body2" color="text.secondary" mb={2}>
                            {module.description}
                          </Typography>
                          <Box display="flex" flexWrap="wrap" gap={1}>
                            {module.actions.map((action, idx) => (
                              <Button
                                key={idx}
                                size="small"
                                variant="outlined"
                                onClick={() => handleModuleAction(module, action)}
                                sx={{ 
                                  fontSize: '0.75rem',
                                  borderColor: getStatusColor(module.status),
                                  color: getStatusColor(module.status),
                                  '&:hover': {
                                    backgroundColor: `${getStatusColor(module.status)}10`
                                  }
                                }}
                              >
                                {action}
                              </Button>
                            ))}
                          </Box>
                        </CardContent>
                      </Card>
                    </Grid>
                  ))}
                </Grid>
              </Paper>

              {/* Recent Activities */}
              <Paper sx={{ p: 3, borderRadius: 3, mt: 3 }}>
                <Typography variant="h6" fontWeight="600" gutterBottom>
                  üìä Ho·∫°t ƒë·ªông G·∫ßn ƒë√¢y
                </Typography>
                <TableContainer>
                  <Table>
                    <TableHead>
                      <TableRow>
                        <TableCell>Th·ªùi gian</TableCell>
                        <TableCell>Ho·∫°t ƒë·ªông</TableCell>
                        <TableCell>Ng∆∞·ªùi d√πng</TableCell>
                        <TableCell>Lo·∫°i</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {recentActivities.map((activity, index) => (
                        <TableRow key={index}>
                          <TableCell>{activity.time}</TableCell>
                          <TableCell>{activity.action}</TableCell>
                          <TableCell>{activity.user}</TableCell>
                          <TableCell>
                            <Chip
                              label={activity.type}
                              size="small"
                              sx={{
                                backgroundColor: activity.type === 'success' ? `${theme.success}15` :
                                               activity.type === 'warning' ? `${theme.warning}15` :
                                               `${theme.info}15`,
                                color: activity.type === 'success' ? theme.success :
                                       activity.type === 'warning' ? theme.warning :
                                       theme.info
                              }}
                            />
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              </Paper>
            </Grid>
          </Grid>
        </Box>

        {/* Module Action Dialog */}
        <Dialog
          open={openDialog}
          onClose={() => setOpenDialog(false)}
          maxWidth="md"
          fullWidth
        >
          <DialogTitle>
            {selectedFeature?.action} - {selectedFeature?.module?.title}
          </DialogTitle>
          <DialogContent>
            <Typography variant="body1" paragraph>
              Ch·ª©c nƒÉng {selectedFeature?.action} cho module {selectedFeature?.module?.title} ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.
            </Typography>
            <Alert severity="info">
              T√≠nh nƒÉng n√†y s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai trong phi√™n b·∫£n ti·∫øp theo.
            </Alert>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setOpenDialog(false)}>
              ƒê√≥ng
            </Button>
          </DialogActions>
        </Dialog>

        {/* Snackbar */}
        <Snackbar
          open={snackbar.open}
          autoHideDuration={4000}
          onClose={handleCloseSnackbar}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
        >
          <Alert 
            onClose={handleCloseSnackbar} 
            severity={snackbar.severity}
            sx={{ width: '100%' }}
          >
            {snackbar.message}
          </Alert>
        </Snackbar>
      </Box>
    </>
  );
};

export default SystemManagementPage;